#!/bin/bash/
# Program Name: kvm-install.sh
# Usage: ./kvm-install.sh
# Description: This will setup kvm virtualization on the server

#1. Install desktop 16.04 Ubuntu
echo "*********** ATTENTION ************"
echo "It's assumed that this server is running Ubuntu Desktop 16.04 !!!"
echo "if not, press [ctrl+c] to exit and install Desktop version of Ubuntu "
read -p "Otherwise, press [enter] key to continue. Thanks ...\n"

#2. Disable Network Manager
echo "For fresh install, Network Manager will be disabled ..."
systemctl status NetworkManager
sudo systemctl stop NetworkManager
sudo systemctl disable NetworkManager
read -p "Press [enter] to continue ...\n"

#3. Edit /etc/network/interfaces
clear
ifconfig
echo ""
echo "Enter the up stream network interface for external network [ex. eno1]: "; read EXT
echo "Enter the down stream interface for internal network [ex. eno2]: "; read INT
echo "Enter static ip address of Internal Network Interface [ex. 10.100.205.2]: "; read INT_ADDR
OIFS=$IFS
IFS=':'
array=( $INT_ADDR )
IFS=$OIFS
BCAST_ADDR=${array[0:2] + ".255"}

#backup /etc/network/interface file
sudo cp /etc/network/interface /etc/network/interface.orig
cat << CFG | sudo tee /etc/network/interfaces
# interfaces(5) file used by ifup(8) and ifdown(8)
auto lo
iface lo inet loopback

auto $EXT
iface $EXT inet dhcp

auto $INT
iface $INT inet static
    address $INT_ADDR
    netmask 255.255.255.0
    broadcast $BCAST_ADDR
CFG

# Reset network interface
sudo ip addr flush $INT
sudo ip addr flush $EXT
sudo service networking restart 

#4. Check CPU hardware virtualization support
sudo apt install cpu-checker -y

#5. View the expected output, it should be as shown below:
echo " Check if Server is KVM ready !!!"
echo "The output should be as stated below: " 
echo "***************************"
echo "INFO: /dev/kvm exists "
echo "KVM acceleration can be used"
echo "****************************"
read -p "Press [enter] key to continue..."

#6. run kvm verification
kvm-ok

echo "Does the kvm checker has the same output as stated above? [Y/n]: "; read KVM_OK
KVM_OK=$(echo $KVM_OK | awk '{print toupper($0)}')
if [[ KVM_OK == "N" ]]; then exit
fi

#7. Install KVM
echo "kvm packages will now start installing ...."
sudo apt-get install qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils -y

#8. Verify installation
groups                                
#expected output:supermicro adm cdrom sudo dip plugdev lpadmin sambashare

#9. Reboot the system
sudo reboot
#expected output (after reboot): supermicro adm cdrom sudo dip plugdev lpadmin sambashare libvirtd

#10. Using virsh command, list all vms
sudo virsh list --all                      
#Expected output:
# Id    Name                           State
#----------------------------------------------------

#11. Check for libvirt-sock file ownership
ls -la /var/run/libvirt/libvirt-sock 
#Expected output: srwxrwx--- 1 root libvirtd 0 Apr 12 09:49 /var/run/libvirt/libvirt-sock

#Check for kvm file ownership
ls -l /dev/kvm
#Expected output: crw-rw----+ 1 root kvm 10, 232 Apr 12 09:49 /dev/kvm

#12. install Virt Manager
sudo apt-get install virt-manager -y

#13. install teamviewer
mkdir teamviewer-install
cd teamviewer-install
wget https://download.teamviewer.com/download/linux/teamviewer_amd64.deb
sudo dpkg -i teamviewer_amd64.deb 
sudo apt-get install -f -y

#14. Install iced_tea
cd 
sudo apt-get install -y icedtea-netx
javaws ~/Downloads/cgoban.jnlp

#15. Create a network bridge 
# The procedure below will create a physical bridge for virtualization purposes
# A bridge-install.sh script will also do exactly the same. Thus, this script can also run 
# independently
#!/bin/bash

clear
echo "Script Description:"
echo "This script will create a bridge to the VM(s)"
echo "Bridge will be created for the internal network of VM(s)"
echo "While macvtap will be used for the external network of VMs"
echo "In addition, a promiscus mode will apply on the bridge network interface" 
read -p "Press [Enter] key to continue..."

#install the software #
#check if aptitude package is installed
sudo apt install aptitude -Y
sudo aptitude install bridge-utils

# show network interfaces #
clear
ifconfig -a |grep -i Ethernet
echo "Remember the IP address as shown above will be used to create bridge network !!!"
echo "Use the DNS NAME Server = "   
str="yahoo.com"
nslookup $str

# Network info from User input here: #
echo -n "Enter External network interface [ex. eno1]: "; read INT
# while loop is for multiple entrees of NIC(s) to bridge
loop_again = 1
while [ $loop_again -eq 1 ]; do
    echo -n "Enter the NIC name to bridge. You can enter multiple NIC to bind"
    echo -n "Just seprate it by space [ex. eno2 enp1s0f0 enp1s0f1]: "; read -a INTS
    echo "You've just entered '$#' NIC(s) to bridge. These are the ff.:"
    echo ${#INT[@]}
    echo "Is this right? [y/n]: "; read yn
    if [[ $yn == "y" ]]; then loop_again = 0; fi
done

echo -n "Enter bridge name [ex. br0]: "; read BNAME
echo -n "Enter IP address of the bridge network: "; read IPADDR
echo -n "Enter broadcast IP address [ex. xx.xx.xx.255]: "; read BADDR

# temporary name
# create a bridge name
sudo brctl addbr $BNAME

# Add the interfaces to be bridged #
sudo brctl addif $BNAME $INT 

# Setup network config file #
sudo cp /etc/network/interfaces /etc/network/interfaces.bak
cat << BRIDGE | sudo tee /etc/network/interfaces
    
# interfaces(5) file used by ifup(8) and ifdown(8)
# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
auto $EXT
iface $EXT inet dhcp

# The bride network interface
auto $BNAME
iface $BNAME inet static 
    address $IPADDR
    netmask 255.255.255.0
    broadcast $BADDR
    bridge_ports ${INT[@]}
    bridge_stp off
    bridge_fd 0
    bridge_maxwait 0

BRIDGE

#for loop to populate secondary NIC interfaces
for INT in $INTS
do
    echo >> /etc/network/interfaces
    echo auto $INT >> /etc/network/interfaces
    echo iface $INT inet manual >> /etc/network/interfaces
    echo up ifconfig $INT promisc >> /etc/network/interfaces
    echo down ifconfig $INT -promisc >> /etc/network/interfaces
done

# Reset network interface #
sudo ip addr flush $INT
sudo ifup $BNAME

#sudo ip addr flush $SEC_INT
sudo services networking restart

# to verify bridge is working !!! #
brctl show
ifconfig
